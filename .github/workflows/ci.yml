name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Install dependencies and build
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            apps/*/dist
            apps/*/.next

  # Lint and typecheck
  lint-typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Typecheck
        run: pnpm typecheck

  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test -- --run
        env:
          MOCK_OPENAI: 'true'

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/*/coverage/lcov.info,./apps/*/coverage/lcov.info
          fail_ci_if_error: false

  # QA Harness (mock mode for PRs)
  qa-harness:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run QA Harness (Mock Mode)
        run: |
          cd tests/qa-harness
          pnpm harness > results.json
        env:
          MOCK_OPENAI: 'true'
          MAX_CONCURRENCY: '3'
          TIMEOUT_MS: '10000'

      - name: Generate QA Report
        run: |
          cd tests/qa-harness
          pnpm report results.json report.md

      - name: Upload QA Results
        uses: actions/upload-artifact@v3
        with:
          name: qa-harness-results
          path: |
            tests/qa-harness/results.json
            tests/qa-harness/report.md

      - name: Comment QA Results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = 'tests/qa-harness/report.md';
            
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              const comment = `## QA Harness Results\n\n\`\`\`\n${report}\n\`\`\``;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # QA Harness (real models for staging)
  qa-harness-staging:
    runs-on: ubuntu-latest
    needs: setup
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run QA Harness (Real Models)
        run: |
          cd tests/qa-harness
          pnpm harness > results.json
        env:
          MOCK_OPENAI: 'false'
          MAX_CONCURRENCY: '2'
          TIMEOUT_MS: '30000'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Generate QA Report
        run: |
          cd tests/qa-harness
          pnpm report results.json report.md

      - name: Upload QA Results
        uses: actions/upload-artifact@v3
        with:
          name: qa-harness-staging-results
          path: |
            tests/qa-harness/results.json
            tests/qa-harness/report.md

  # E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Install Playwright
        run: pnpm exec playwright install --with-deps

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          MOCK_OPENAI: 'true'

      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: |
            apps/*/playwright-report
            apps/*/test-results

  # Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    needs: [setup, qa-harness-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run Quality Gates
        run: |
          cd packages/analyzer
          pnpm gate staging 24
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Generate Quality Report
        run: |
          cd packages/analyzer
          pnpm vam > vam-report.md

      - name: Upload Quality Results
        uses: actions/upload-artifact@v3
        with:
          name: quality-gates-results
          path: |
            packages/analyzer/vam-report.md

  # Deploy to staging (if all checks pass)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint-typecheck, unit-tests, e2e-tests, qa-harness-staging, quality-gates]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging..."
          # Add actual deployment commands here
          # This could be deploying to Vercel, AWS, etc.

  # Deploy to production (if all checks pass and on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint-typecheck, unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Run Production Quality Gates
        run: |
          cd packages/analyzer
          pnpm gate production 168  # 1 week window
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add actual deployment commands here
